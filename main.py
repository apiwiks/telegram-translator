import docx
from deep_translator import GoogleTranslator
import telebot
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from config import *
import datetime as dt
import logging, os, traceback, wget, random
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from gtts import gTTS


class EditMessage(StatesGroup): # –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    message_id = State()

bot = telebot.TeleBot(
                    BOT_TOKEN, # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ config.py
                    state_storage = StateMemoryStorage(), # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
                    skip_pending=True
                    )

logging.basicConfig(filename = "loggs.log", # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ —Ñ–∞–π–ª loggs.log
                format=f"%(levelname)s: {dt.datetime.now().strftime('%d.%m %H:%M')} %(message)s",
                level=logging.INFO)


def __init__(): # –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–µ—Ä

    print(f"Bot started")

    logging.info("Bot started")

    bot.enable_save_next_step_handlers(delay=10)

    bot.load_next_step_handlers()

    bot.infinity_polling(skip_pending=True)


def bot_edit_message(chat_id, text, markup): # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
    try:
        with bot.retrieve_data(chat_id, chat_id) as data: # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è
            msg = bot.edit_message_text(
                                        text, 
                                        chat_id, data["message_id"], 
                                        parse_mode="Markdown", 
                                        reply_markup=markup
                                        )
            with bot.retrieve_data(chat_id, chat_id) as data:
                data['message_id'] = msg.message_id
                
    except:
        msg = bot.send_message(
                                chat_id, 
                                text, 
                                reply_markup = markup, 
                                parse_mode="Markdown"
                            )
        bot.set_state(
                        chat_id, 
                        EditMessage.message_id, 
                        chat_id
                        )

        with bot.retrieve_data(chat_id, chat_id) as data:
            data['message_id'] = msg.message_id


@bot.message_handler(commands=['start'], chat_types="private") # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
def welcome_msg(message):
    bot.send_message(
                    message.chat.id, 
                    "‚úåÔ∏è –ü—Ä–∏–≤–µ—Ç, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–∞–π–ª –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!"
                    )
    logging.info(f"{message.chat.id} > /start") # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ –∂—É—Ä–Ω–∞–ª


@bot.message_handler(content_types=["document"], chat_types="private") # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_file(message):
    try:
        file = bot.get_file(message.document.file_id) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
        print(message.document.file_name[-5:])
        if message.document.file_name[-5:] == ".docx" or message.document.file_name[-5:] == ".DOCX": # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
            file_name = message.document.file_name[:10] + (message.document.file_name[10:] and '.docx')
            if file.file_size >= 300000: # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                logging.error(f"{message.chat.id} upload big size file")
                msg = bot.send_message(
                                        message.chat.id, 
                                        f"üêò –§–∞–π–ª \"{file_name}\" —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥–æ–π.", 
                                        parse_mode="Markdown"
                                        )
            else:
                print(f"{file_name} {file}")
                if not os.path.exists(f'{BOT_PATH}/docs/dowloads/{file_name}'): # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    wget.download(                                              # –ù–∞—á–∏–Ω–∞–π —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                        'https://api.telegram.org/file/bot{0}/{1}'.format(BOT_TOKEN, file.file_path), 
                                                        f'{BOT_PATH}/docs/dowloads/{file_name}', 
                                                        bar=None
                                )

                msg = bot.send_message(
                                        message.chat.id, 
                                        f"üìÅ –û—Ç–ª–∏—á–Ω–æ, —Ñ–∞–π–ª \"{file_name}\" –∑–∞–≥—Ä—É–∂–µ–Ω.", 
                                        parse_mode="Markdown"
                                        )
                                        
                kb_select_f_lang = InlineKeyboardMarkup(row_width = 2) # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞

                kb_select_f_lang.add(
                                InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data=f"SFL|{file_name}|ru"), # –¢–ï–ö–°–¢ –ö–ù–û–ü–ö–ò \ –¢–µ–∫—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞ –∫–Ω–æ–ø–∫–∏
                                InlineKeyboardButton("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data=f"SFL|{file_name}|en"),
                                InlineKeyboardButton("üá∑üá¥ –†—É–º—ã–Ω—Å–∫–∏–π", callback_data=f"SFL|{file_name}|ro"),
                                InlineKeyboardButton("üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π", callback_data=f"SFL|{file_name}|es"),
                                InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π", callback_data=f"SFL|{file_name}|uk"),
                                InlineKeyboardButton("üá¶üá™ –ê—Ä–∞–±—Å–∫–∏–π", callback_data=f"SFL|{file_name}|ar"),
                                InlineKeyboardButton("üá¶üá≤ –ê—Ä–º—è–Ω—Å–∫–∏–π", callback_data=f"SFL|{file_name}|hy"),
                                InlineKeyboardButton("üáßüá¨ –ë–æ–ª–≥–∞—Ä—Å–∫–∏–π", callback_data=f"SFL|{file_name}|bg"),
                                InlineKeyboardButton("üá®üáø –ß–µ—à—Å–∫–∏–π", callback_data=f"SFL|{file_name}|cs"),
                                InlineKeyboardButton("üá™üá™ –≠—Å—Ç–æ–Ω—Å–∫–∏–π", callback_data=f"SFL|{file_name}|et"),
                                InlineKeyboardButton("üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", callback_data=f"SFL|{file_name}|fr"),
                                InlineKeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å–∫–∏–π", callback_data=f"SFL|{file_name}|kk"),
                                InlineKeyboardButton("üáµüá± –ü–æ–ª—å—Å–∫–∏–π", callback_data=f"SFL|{file_name}|pl"),
                                InlineKeyboardButton("üá®üá´ –ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π", callback_data=f"SFL|{file_name}|af")
                                )
                                

                msg = bot.edit_message_text(
                                            f"üåè –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —Ñ–∞–π–ª–∞:", 
                                            message.chat.id, 
                                            msg.message_id, 
                                            reply_markup = kb_select_f_lang
                                            )

                bot.set_state(              # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            message.chat.id, 
                            EditMessage.message_id, 
                            message.chat.id
                            )
                with bot.retrieve_data(message.chat.id, message.chat.id) as data:
                    data['message_id'] = msg.message_id

                logging.info(f"{message.chat.id} upload file {file_name}")

        else:
            bot.send_message(
                            message.chat.id, 
                            f"‚òπÔ∏è –î–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∑–∞–≥—Ä—É–∑–∏—Ç–µ .docx", 
                            parse_mode="Markdown"
                            )

    except Exception as error:
        traceback.print_exc()
        logging.error(f"{message.chat.id} Error FILE: {error}")
        bot.send_message(
                        message.chat.id, 
                        f"‚òπÔ∏è –ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à —Ñ–∞–π–ª, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥–æ–π.", 
                        parse_mode="Markdown"
                        )


@bot.callback_query_handler(func=lambda call: True) # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞
def callback_query(call):
    valid_lang = ["ru", "en", "ro", "es", "uk", "ar", "hy", "bg", "cs", "et", "fr", "kk", "pl", "af"] # –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —è–∑—ã–∫–æ–≤
    logging.info(f"{call.message.chat.id} > {call.data}") 
    zdata = (call.data).split("|") # –†–∞–∑–±–∏–µ–Ω–∏–µ calldata –Ω–∞ —ç–ª–ª–µ–º–µ–Ω—Ç—ã 
    try:
        if zdata[0] == "SFL":
            if zdata[2] in valid_lang: # –ï—Å–ª–∏ —è–∑—ã–∫ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö

                kb_select_f_lang = InlineKeyboardMarkup(row_width = 1)

                kb_select_f_lang.add(
                                    InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|ru"), # –ü–µ—Ä–µ–≤–æ–¥|–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞|—è–∑—ã–∫1|—è–∑—ã–∫2
                                    InlineKeyboardButton("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|en"),
                                    InlineKeyboardButton("üá∑üá¥ –†—É–º—ã–Ω—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|ro"),
                                    InlineKeyboardButton("üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|es"),
                                    InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|uk"),
                                    InlineKeyboardButton("üá¶üá™ –ê—Ä–∞–±—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|ar"),
                                    InlineKeyboardButton("üá¶üá≤ –ê—Ä–º—è–Ω—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|hy"),
                                    InlineKeyboardButton("üáßüá¨ –ë–æ–ª–≥–∞—Ä—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|bg"),
                                    InlineKeyboardButton("üá®üáø –ß–µ—à—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|cs"),
                                    InlineKeyboardButton("üá™üá™ –≠—Å—Ç–æ–Ω—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|et"),
                                    InlineKeyboardButton("üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|fr"),
                                    InlineKeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|kk"),
                                    InlineKeyboardButton("üáµüá± –ü–æ–ª—å—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|pl"),
                                    InlineKeyboardButton("üá®üá´ –ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π", callback_data=f"TRANSLETE|{zdata[1]}|{zdata[2]}|af")
                                    )

                bot_edit_message(
                                call.message.chat.id, 
                                f"üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–∞–π–ª", 
                                kb_select_f_lang
                                )

            else:
                bot_edit_message(
                                call.message.chat.id, 
                                f"üòå –î–∞–Ω–Ω—ã–π —è–∑—ã–∫–æ–≤–æ–π –ø–∞–∫–µ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.",
                                None
                                )

        elif zdata[0] == "TRANSLETE":
            try:
                bot_edit_message(
                                call.message.chat.id, 
                                f"‚è≥ –ü–µ—Ä–µ–≤–æ–∂—É —Ñ–∞–π–ª, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è ... ",
                                None
                                )

                doc = docx.Document(f'{BOT_PATH}/docs/dowloads/{zdata[1]}') # –û—Ç—Ä—ã—Ç–∏–µ docx
                out_txt_name = zdata[1].replace(".docx", ".txt")
                
                with open(f'{BOT_PATH}/docs/results/{out_txt_name}', "w", encoding="utf-8") as txt_result: # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª—ã
                    for paragraph in doc.paragraphs:
                        transleted_text = GoogleTranslator(source = zdata[2], target=zdata[3]).translate(paragraph.text) # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫

                        txt_result.write(f"\n{transleted_text}") # –ó–∞–ø–∏—Å—å –≤ txt

                        if paragraph.text.find(paragraph.text) >= 0:
                            paragraph.text = paragraph.text.replace(paragraph.text, transleted_text) # –ó–∞–ø–∏—Å—å –≤ docx

                        print(transleted_text)

                txt_result.close()
                doc.save(f'{BOT_PATH}/docs/results/{zdata[1]}') # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ docx

                kb = InlineKeyboardMarkup(row_width = 1)
                kb.add(
                    InlineKeyboardButton("üñäÔ∏è –ü–æ–ª—É—á–∏—Ç—å –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞", callback_data=f"GET-RESULT|TEXT|{out_txt_name}"),
                    InlineKeyboardButton("üìï –ü–æ–ª—É—á–∏—Ç—å –≤ –≤–∏–¥–µ DOCX —Ñ–∞–π–ª–∞", callback_data=f"GET-RESULT|DOCX|{zdata[1]}"),
                    InlineKeyboardButton("üìÉ –ü–æ–ª—É—á–∏—Ç—å –≤ –≤–∏–¥–µ TXT —Ñ–∞–π–ª–∞", callback_data=f"GET-RESULT|TXT|{out_txt_name}"),
                    InlineKeyboardButton("üîä –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"GET-RESULT|VOICE|{out_txt_name}|{zdata[3]}")
                    )

                bot_edit_message(
                                call.message.chat.id, 
                                f"üëç –§–∞–π–ª –ø–µ—Ä–µ–≤–µ–¥–µ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–º –≤–∏–¥–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", 
                                kb
                                )

            except Exception as error:
                print(error)
                traceback.print_exc()
                bot_edit_message(
                                call.message.chat.id, 
                                f"‚ö† –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!\nüåç –í–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫ —Ñ–∞–π–ª–∞"
                                , None
                                )

        elif zdata[0] == "GET-RESULT": # –î–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if zdata[1] == "TEXT": # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
                try:

                    text = open(f"{BOT_PATH}/docs/results/{zdata[2]}", "r") # –ß—Ç–µ–Ω–∏–µ txt –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    bot.send_message(
                                    call.message.chat.id, 
                                    text.read()
                                    )
                    text.close()

                except:
                    bot.send_message(
                                    call.message.chat.id,
                                    "üêò –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º"
                                    )
            

            elif zdata[1] == "TXT": # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –≤ –≤–∏–¥–µ .txt —Ñ–∞–π–ª–∞
                doc = open(f"{BOT_PATH}/docs/results/{zdata[2]}", "rb")
                bot.send_document(call.message.chat.id, doc)
                doc.close()

            elif zdata[1] == "DOCX": # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –≤ –≤–∏–¥–µ .docx —Ñ–∞–π–ª–∞ 
                doc = open(f"{BOT_PATH}/docs/results/{zdata[2]}", "rb")
                bot.send_document(call.message.chat.id, doc)

            elif zdata[1] == "VOICE": # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –≤ –≤–∏–¥–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    text = open(f"{BOT_PATH}/docs/results/{zdata[2]}", "r", encoding="utf-8")
                    voice_message = gTTS(text = text.read(), lang=f"{zdata[3]}", slow=False) # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ gTTS
                    name = f"{call.message.chat.id}_{random.randint(0, 99)}.ogg" 
                    voice_message.save(name) # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ .ogg —Ñ–∞–π–ª–∞
                    voice = open(name, 'rb')
                    bot.send_voice(call.message.chat.id, voice) # –û—Ç–ø—Ä–∞–≤–∫–∞ .ogg —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    voice.close()
                    text.close()
                    os.remove(name) # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                
                except:
                    bot.send_message(
                                    call.message.chat.id,
                                    "üêò –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –µ–≥–æ."
                                    )

    except Exception as error:
        logging.error(f"{call.message.chat.id} ERROR CALL-BACK: {error}")
        return welcome_msg(call.message)

if __name__ == "__main__":
    __init__()